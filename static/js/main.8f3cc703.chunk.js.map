{"version":3,"sources":["components/Grid/AiGrid/AiGrid.module.css","components/Grid/PlayerGrid/PlayerGrid.module.css","components/Announcer/Announcer.module.css","components/SunkShips/SunkShip/SunkShip.module.css","containers/Game/Game.module.css","components/Header/Header.module.css","components/Tutorial/TutorialCont/TutorialCont.module.css","components/Ship/Ship.module.css","components/Button/Button.module.css","components/Tutorial/TutorialItem/TutorialItem.module.css","components/SunkShips/SunkCont/SunkCont.module.css","factories/gameboardFactory/gameboardFactory.js","factories/shipFactory/shipFactory.js","reactdnd/constants.js","components/Ship/Ship.js","components/Grid/GridCell/GridCell.js","components/Grid/PlayerGrid/PlayerGrid.js","components/Grid/AiGrid/AiGrid.js","components/Button/Button.js","components/Header/Header.js","components/Announcer/Announcer.js","components/Tutorial/TutorialItem/TutorialItem.js","components/Tutorial/TutorialCont/TutorialCont.js","components/SunkShips/SunkShip/SunkShip.js","components/SunkShips/SunkCont/SunkCont.js","containers/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createGameboard","checkX","board","x","y","z","i","checkY","placeShip","coords","boardData","ship","orientation","parseInt","charAt","newData","JSON","parse","stringify","newCoords","newBoard","length","totalHP","receiveAttack","isOverCheck","randomPlaceShip","Math","floor","random","correctPS","receiveRandomAttack","played","shipAt","getInitialBoard","getInitialData","getInitialCoords","2","4","5","changeOrientation","newOri","createShip","name","ships","hp","isSunk","getInitialShip","hit","newShip","ItemTypes","Ship","props","useDrag","item","type","collect","monitor","isDragging","canDrag","isStarted","isOver","drag","style","height","toString","width","top","left","opacity","ref","className","classes","onClick","changeOri","Cell","useDrop","accept","drop","placeShips","id","getItem","outerClass","innerClass","children","Grid","useEffect","randomPlaceShips","ship2","ship3_1","ship3_2","ship4","ship5","shouldPlace","playerGrid","map","row","index","cell","GridCell","key","Fragment","newGrid","gameIsOver","e","playRound","Button","Header","Announcer","spanStyle","divStyle","text","TutorialItem","TutorialCont","toggle","show","SunkShip","builtShip","push","SunkCont","sunkList","includes","Game","useState","setIsStarted","playerTurn","setPlayerTurn","setGameIsOver","setShouldPlace","setText","setShow","setSunkList","initialShip","Pship2","setPship2","Pship3_1","setPship3_1","Pship3_2","setPship3_2","Pship4","setPship4","Pship5","setPship5","AIship2","setAIship2","AIship3_1","setAIship3_1","AIship3_2","setAIship3_2","AIship4","setAIship4","AIship5","setAIship5","initialBoard","playerBoard","setPlayerBoard","playerCoords","setPlayerCoords","playerData","setPlayerData","aiBoard","setAIboard","aiCoords","setAIcoords","aiData","setAIdata","firstHit","setFirstHit","foundShips","setFoundShips","hitCoords","setHitCoords","adjDir","setAdjDir","checkIsSunk","sunk","switchDir","aiPlayRound","aiTurn","adjCoordsArgs","adjCells","adjCoords","getAdjCoords","randomAdj","randomTurn","slice","newFoundShips","nextMove","safeMove","newHitCoord","newHitCoords","safeShipAt","newPboard","newPdata","setTimeout","GridCont","PlayerGrid","testid","ship1","ship3","newState","newPlacement","AiGrid","event","newAiBoard","newAiData","newSunkList","App","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,SAAW,yBAAyB,IAAM,oBAAoB,KAAO,qBAAqB,MAAQ,wB,kBCAtLD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,KAAO,yBAAyB,SAAW,6BAA6B,IAAM,wBAAwB,KAAO,2B,gBCAzKD,EAAOC,QAAU,CAAC,QAAU,2BAA2B,OAAS,0BAA0B,QAAU,2BAA2B,SAAW,4BAA4B,OAAS,0BAA0B,OAAS,4B,qBCAlND,EAAOC,QAAU,CAAC,SAAW,2BAA2B,SAAW,2BAA2B,KAAO,yB,uBCArGD,EAAOC,QAAU,CAAC,SAAW,uBAAuB,WAAa,yBAAyB,IAAM,kBAAkB,KAAO,qB,gBCAzHD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,MAAQ,wB,gBCAlED,EAAOC,QAAU,CAAC,aAAe,mCAAmC,KAAO,6B,mBCA3ED,EAAOC,QAAU,CAAC,KAAO,qB,iBCAzBD,EAAOC,QAAU,CAAC,UAAY,4B,gBCA9BD,EAAOC,QAAU,CAAC,aAAe,qC,gBCAjCD,EAAOC,QAAU,CAAC,SAAW,6B,2KC0RdC,EA3RS,WACtB,IAuCMC,EAAS,SAACC,EAAOC,EAAGC,EAAGC,GAE3B,GAAID,EAAIC,EAAI,EAAI,EACd,OAAO,EAEP,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAGC,IAAK,CAC1B,GAAwB,IAApBJ,EAAMC,GAAGC,EAAIE,GAKf,OAAO,EAJP,GAAIA,IAAMD,EAAI,EACZ,OAAO,IASXE,EAAS,SAACL,EAAOC,EAAGC,EAAGC,GAE3B,GAAIF,EAAIE,EAAI,EAAI,EACd,OAAO,EAEP,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAGC,IAAK,CAC1B,GAAwB,IAApBJ,EAAMC,EAAIG,GAAGF,GAKf,OAAO,EAJP,GAAIE,IAAMD,EAAI,EACZ,OAAO,IAuDXG,EAAY,SAACN,EAAOO,EAAQC,EAAWC,EAAMR,EAAGC,EAAGQ,GACvD,GAAoB,MAAhBA,GAAuBX,EAAOC,EAAOC,EAAGC,EAAGS,SAASF,EAAKG,OAAO,KAAM,CACxE,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,UAAUR,IACpCS,EAAYH,KAAKC,MAAMD,KAAKE,UAAUT,IACtCW,EAAWJ,KAAKC,MAAMD,KAAKE,UAAUhB,IACzC,GAA4B,IAAxBO,EAAOE,GAAMU,OAAc,CAC7B,GAAwB,MAApBZ,EAAOE,GAAM,GACf,IAAK,IAAIN,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5Ce,EAASX,EAAOE,GAAM,IAAIF,EAAOE,GAAM,GAAKN,GAAK,OAGnD,IAAK,IAAIA,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5Ce,EAASX,EAAOE,GAAM,GAAKN,GAAGI,EAAOE,GAAM,IAAM,EAGrDI,EAAQO,SAAWT,SAASF,EAAKG,OAAO,IAE1C,IAAK,IAAIR,EAAI,EAAGA,EAAIO,SAASF,EAAKG,OAAO,IAAKR,IAC5Cc,EAASjB,GAAGC,EAAIE,GAAK,EAIvB,OAFAS,EAAQO,SAAWT,SAASF,EAAKG,OAAO,IACxCK,EAAUR,GAAQ,CAACR,EAAGC,EAAGQ,GAClB,CAACQ,EAAUD,EAAWJ,GACxB,GACW,MAAhBH,GACAL,EAAOL,EAAOC,EAAGC,EAAGS,SAASF,EAAKG,OAAO,KACzC,CACA,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,UAAUR,IACpCS,EAAYH,KAAKC,MAAMD,KAAKE,UAAUT,IACtCW,EAAWJ,KAAKC,MAAMD,KAAKE,UAAUhB,IACzC,GAA4B,IAAxBO,EAAOE,GAAMU,OAAc,CAC7B,GAAwB,MAApBZ,EAAOE,GAAM,GACf,IAAK,IAAIN,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5Ce,EAASX,EAAOE,GAAM,IAAIF,EAAOE,GAAM,GAAKN,GAAK,OAGnD,IAAK,IAAIA,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5Ce,EAASX,EAAOE,GAAM,GAAKN,GAAGI,EAAOE,GAAM,IAAM,EAGrDI,EAAQO,SAAWT,SAASF,EAAKG,OAAO,IAE1C,IAAK,IAAIR,EAAI,EAAGA,EAAIO,SAASF,EAAKG,OAAO,IAAKR,IAC5Cc,EAASjB,EAAIG,GAAGF,GAAK,EAIvB,OAFAW,EAAQO,SAAWT,SAASF,EAAKG,OAAO,IACxCK,EAAUR,GAAQ,CAACR,EAAGC,EAAGQ,GAClB,CAACQ,EAAUD,EAAWJ,GAE7B,OAAO,GA+BLQ,EAAgB,SAACrB,EAAOQ,EAAWP,EAAGC,GAC1C,IAAIgB,EAAWJ,KAAKC,MAAMD,KAAKE,UAAUhB,IACrCa,EAAUC,KAAKC,MAAMD,KAAKE,UAAUR,IACxC,OAAQR,EAAMC,GAAGC,IACf,KAAK,EAEH,OADAgB,EAASjB,GAAGC,GAAK,EACV,CAACgB,EAAUL,GACpB,KAAK,EAGH,OAFAK,EAASjB,GAAGC,GAAK,EACjBW,EAAQO,SAAW,EACZ,CAACF,EAAUL,GACpB,QACE,OAAO,IAyDb,MAAO,CACLP,YACAe,gBACAC,YAhPkB,SAACd,GACnB,OAA0B,IAAtBA,EAAUY,SAgPdG,gBApGsB,SAACvB,EAAOO,EAAQC,EAAWC,GAIjD,IAHA,IAAIR,EACAC,EACAQ,IACS,CACX,GACET,EAAIuB,KAAKC,MAAsB,GAAhBD,KAAKE,UACpBxB,EAAIsB,KAAKC,MAAsB,GAAhBD,KAAKE,UAEfhB,EAD6B,IAAlCc,KAAKC,MAAsB,EAAhBD,KAAKE,UACG,IACA,UACI,IAAhB1B,EAAMC,GAAGC,IAClB,IAAIyB,EAAYrB,EACdN,EACAO,EACAC,EACAC,EACAR,EACAC,EACAQ,GAEF,GAAIiB,EACF,OAAOA,IA+EXC,oBA1D0B,SAAC5B,EAAOQ,GAClC,IACIP,EACAC,EAFA2B,GAAS,EAGb,GACE5B,EAAIuB,KAAKC,MAAsB,GAAhBD,KAAKE,UACpBxB,EAAIsB,KAAKC,MAAsB,GAAhBD,KAAKE,UACA,IAAhB1B,EAAMC,GAAGC,IAA4B,IAAhBF,EAAMC,GAAGC,KAChC2B,GAAS,UAEO,IAAXA,GACT,MAAM,CAAE5B,EAAGC,GAAX,mBAAiBmB,EAAcrB,EAAOQ,EAAWP,EAAGC,MAgDpD4B,OA7Ca,SAACvB,EAAQN,EAAGC,GAEzB,IAAK,IAAIO,KAAQF,EACf,GAAIA,EAAOE,GAAM,KAAOE,SAASV,IAC/B,GAAwB,MAApBM,EAAOE,GAAM,IACf,IAAK,IAAIN,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5C,GAAII,EAAOE,GAAM,GAAKN,IAAMQ,SAAST,GACnC,OAAOO,OAIX,GAAIF,EAAOE,GAAM,KAAOE,SAAST,GAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5C,GAAII,EAAOE,GAAM,GAAKN,IAAMQ,SAASV,GACnC,OAAOQ,OAKV,GAAIF,EAAOE,GAAM,KAAOE,SAAST,GACtC,GAAwB,MAApBK,EAAOE,GAAM,IACf,IAAK,IAAIN,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5C,GAAII,EAAOE,GAAM,GAAKN,IAAMQ,SAASV,GACnC,OAAOQ,OAIX,GAAIF,EAAOE,GAAM,KAAOE,SAASV,GAC/B,IAAK,IAAIE,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5C,GAAII,EAAOE,GAAM,GAAKN,IAAMQ,SAAST,GACnC,OAAOO,GAgBnBsB,gBAnRsB,WACtB,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAyQ9BC,eArQqB,WACrB,MAAO,CACLZ,QAAS,IAoQXa,iBAhQuB,WACvB,MAAO,CACLC,EAAG,GACH,MAAO,GACP,MAAO,GACPC,EAAG,GACHC,EAAG,KA2PLC,kBA7MwB,SAACrC,EAAOO,EAAQE,GAExC,IAAI6B,EAA6B,MAApB/B,EAAOE,GAAM,GAAa,IAAM,IAC7C,GACa,MAAX6B,GACAvC,EACEC,EACAO,EAAOE,GAAM,GACbF,EAAOE,GAAM,GAAK,EAClBE,SAASF,EAAKG,OAAO,IAAM,GAE7B,CAGA,IAFA,IAAIK,EAAYH,KAAKC,MAAMD,KAAKE,UAAUT,IACtCW,EAAWJ,KAAKC,MAAMD,KAAKE,UAAUhB,IAChCG,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5Ce,EAASX,EAAOE,GAAM,GAAKN,GAAGI,EAAOE,GAAM,IAAM,EAEnD,IAAK,IAAIL,EAAI,EAAGA,EAAIO,SAASF,EAAKG,OAAO,IAAKR,IAC5Cc,EAASX,EAAOE,GAAM,IAAIF,EAAOE,GAAM,GAAKL,GAAK,EAGnD,OADAa,EAAUR,GAAQ,CAACF,EAAOE,GAAM,GAAIF,EAAOE,GAAM,GAAI6B,GAC9C,CAACpB,EAAUD,GACb,GACM,MAAXqB,GACAjC,EACEL,EACAO,EAAOE,GAAM,GAAK,EAClBF,EAAOE,GAAM,GACbE,SAASF,EAAKG,OAAO,IAAM,GAE7B,CAGA,IAFA,IAAIK,EAAYH,KAAKC,MAAMD,KAAKE,UAAUT,IACtCW,EAAWJ,KAAKC,MAAMD,KAAKE,UAAUhB,IAChCG,EAAI,EAAGA,EAAIQ,SAASF,EAAKG,OAAO,IAAKT,IAC5Ce,EAASX,EAAOE,GAAM,IAAIF,EAAOE,GAAM,GAAKN,GAAK,EAEnD,IAAK,IAAIC,EAAI,EAAGA,EAAIO,SAASF,EAAKG,OAAO,IAAKR,IAC5Cc,EAASX,EAAOE,GAAM,GAAKL,GAAGG,EAAOE,GAAM,IAAM,EAGnD,OADAQ,EAAUR,GAAQ,CAACF,EAAOE,GAAM,GAAIF,EAAOE,GAAM,GAAI6B,GAC9C,CAACpB,EAAUD,GAElB,OAAO,KCxDEsB,EA5DI,SAACC,GAClB,IAAIC,EAAQ,CACVP,EAAG,CACDf,OAAQ,EACRuB,GAAI,EACJC,QAAQ,GAEV,MAAO,CACLxB,OAAQ,EACRuB,GAAI,EACJC,QAAQ,GAEV,MAAO,CACLxB,OAAQ,EACRuB,GAAI,EACJC,QAAQ,GAEVR,EAAG,CACDhB,OAAQ,EACRuB,GAAI,EACJC,QAAQ,GAEVP,EAAG,CACDjB,OAAQ,EACRuB,GAAI,EACJC,QAAQ,IA4BZ,MAAO,CACLC,eAzBqB,SAACJ,GACtB,MAAO,CACLA,KAAMA,EACNrB,OAAQsB,EAAMD,GAAMrB,OACpBuB,GAAID,EAAMD,GAAME,GAChBC,QAAQ,IAqBVE,IAjBU,SAACpC,GACX,IAAIqC,EAAUhC,KAAKC,MAAMD,KAAKE,UAAUP,IAExC,OADAqC,EAAQJ,IAAM,EACPI,GAePH,OAZa,SAAClC,GACd,OAAgB,IAAZA,EAAKiC,KACPjC,EAAKkC,QAAS,GACP,M,yBC/CAI,EACL,OCiDOC,EA7CF,SAACC,GAAU,MAESC,YAAQ,CACrCC,KAAM,CACJC,KAAML,EACNP,KAAMS,EAAMxC,KAAK+B,KACjBjC,OAAQ0C,EAAM1C,OAAO0C,EAAMxC,KAAK+B,MAAM,IAExCa,QAAS,SAACC,GAAD,MAAc,CACrBC,aAAcD,EAAQC,eAExBC,SAAUP,EAAMQ,YAAcR,EAAMS,SAXhB,mBAEbH,EAFa,KAEbA,WAAcI,EAFD,KAclBC,EAAQ,CACVC,OAAO,GAAD,OACiC,MAArCZ,EAAM1C,OAAO0C,EAAMxC,KAAK+B,MAAM,GAC1B,QACqB,GAApBS,EAAMxC,KAAKU,OAAc,GAAG2C,WAAa,MAEhDC,MAAM,GAAD,OACkC,MAArCd,EAAM1C,OAAO0C,EAAMxC,KAAK+B,MAAM,IACL,GAApBS,EAAMxC,KAAKU,OAAc,GAAG2C,WAAa,KAC1C,QAENE,IAAI,GAAD,QAAyC,GAAnCf,EAAM1C,OAAO0C,EAAMxC,KAAK+B,MAAM,IAASsB,WAAa,MAC7DG,KAAK,GAAD,QAAyC,GAAnChB,EAAM1C,OAAO0C,EAAMxC,KAAK+B,MAAM,IAASsB,WAAa,MAC9DI,QAAQ,GAAD,OAAKX,EAAa,IAAM,MAejC,OAZE,yBACEY,IAAKR,EACLS,UAAWC,IAAQrB,KACnBY,MAAOA,EACPU,QACGrB,EAAMQ,WAAcR,EAAMS,OAEvB,KADA,kBAAMT,EAAMsB,UAAUtB,EAAMxC,KAAK+B,U,QCP9BgC,EA9BF,SAACvB,GAAU,MAEGwB,YAAQ,CAC/BC,OAAQ3B,EACR4B,KAAM,WACJ1B,EAAM2B,WACJnE,EAAK+B,KACL7B,SAASsC,EAAM4B,GAAGjE,OAAO,IACzBD,SAASsC,EAAM4B,GAAGjE,OAAO,IACzBH,EAAKF,SAIT8C,QAAS,SAACC,GAAD,MAAc,CACrB7C,KAAM6C,EAAQwB,cAdI,mBAEbrE,EAFa,KAEbA,KAAQkE,EAFK,KAkBtB,OACE,yBACEP,UAAWnB,EAAM8B,WACjBF,GAAI5B,EAAM4B,GACVP,QAASrB,EAAMqB,QACfH,IAAKQ,GAEL,0BAAMP,UAAWnB,EAAM+B,YAAa/B,EAAMgC,Y,OC+FjCC,EAvHF,SAACjC,GACZkC,qBAAU,WACRlC,EAAMmC,iBACJnC,EAAMoC,MACNpC,EAAMqC,QACNrC,EAAMsC,QACNtC,EAAMuC,MACNvC,EAAMwC,SAGP,IAEHN,qBAAU,WACRlC,EAAMmC,iBACJnC,EAAMoC,MACNpC,EAAMqC,QACNrC,EAAMsC,QACNtC,EAAMuC,MACNvC,EAAMwC,SAGP,CAACxC,EAAMyC,cAEV,IAAMC,EAAa1C,EAAMjD,MAAM4F,KAAI,SAACC,EAAKC,GACvC,OAAOD,EAAID,KAAI,SAACG,EAAM3F,GACpB,OAA8B,IAA1B6C,EAAMjD,MAAM8F,GAAO1F,GAGnB,kBAAC4F,EAAD,CACEjB,WAAYV,OACZW,WAAYX,WACZ4B,IAAKH,EAAMhC,WAAa1D,EAAE0D,WAC1Be,GAAIiB,EAAMhC,WAAa1D,EAAE0D,WACzBc,WAAY3B,EAAM2B,aAGa,IAA1B3B,EAAMjD,MAAM8F,GAAO1F,GAG1B,kBAAC4F,EAAD,CACEjB,WAAU,UAAKV,OAAL,YAAqBA,OAC/BW,WAAYX,WACZ4B,IAAKH,EAAMhC,WAAa1D,EAAE0D,WAC1Be,GAAIiB,EAAMhC,WAAa1D,EAAE0D,WACzBc,WAAY3B,EAAM2B,aAGa,IAA1B3B,EAAMjD,MAAM8F,GAAO1F,GAG1B,kBAAC4F,EAAD,CACEjB,WAAU,UAAKV,OAAL,YAAqBA,QAC/BW,WAAYX,WACZ4B,IAAKH,EAAMhC,WAAa1D,EAAE0D,WAC1Be,GAAIiB,EAAMhC,WAAa1D,EAAE0D,WACzBc,WAAY3B,EAAM2B,YALpB,UAaA,kBAACoB,EAAD,CACEjB,WAAYV,OACZW,WAAYX,WACZ4B,IAAKH,EAAMhC,WAAa1D,EAAE0D,WAC1Be,GAAIiB,EAAMhC,WAAa1D,EAAE0D,WACzBc,WAAY3B,EAAM2B,mBAO5B,OACE,yBAAKR,UAAWC,aACd,kBAAC,IAAM6B,SAAP,KACGP,EACD,kBAAC,EAAD,CACEpF,OAAQ0C,EAAM1C,OACdE,KAAMwC,EAAMoC,MACZ5B,UAAWR,EAAMQ,UACjBC,OAAQT,EAAMS,OACda,UAAWtB,EAAMsB,YAEnB,kBAAC,EAAD,CACEhE,OAAQ0C,EAAM1C,OACdE,KAAMwC,EAAMqC,QACZ7B,UAAWR,EAAMQ,UACjBC,OAAQT,EAAMS,OACda,UAAWtB,EAAMsB,YAEnB,kBAAC,EAAD,CACEhE,OAAQ0C,EAAM1C,OACdE,KAAMwC,EAAMsC,QACZ9B,UAAWR,EAAMQ,UACjBC,OAAQT,EAAMS,OACda,UAAWtB,EAAMsB,YAEnB,kBAAC,EAAD,CACEhE,OAAQ0C,EAAM1C,OACdE,KAAMwC,EAAMuC,MACZ/B,UAAWR,EAAMQ,UACjBC,OAAQT,EAAMS,OACda,UAAWtB,EAAMsB,YAEnB,kBAAC,EAAD,CACEhE,OAAQ0C,EAAM1C,OACdE,KAAMwC,EAAMwC,MACZhC,UAAWR,EAAMQ,UACjBC,OAAQT,EAAMS,OACda,UAAWtB,EAAMsB,e,OCzBZW,EAxFF,SAACjC,GACZkC,qBAAU,WACRlC,EAAMmC,iBACJnC,EAAMoC,MACNpC,EAAMqC,QACNrC,EAAMsC,QACNtC,EAAMuC,MACNvC,EAAMwC,SAGP,IAEHN,qBAAU,WACRlC,EAAMmC,iBACJnC,EAAMoC,MACNpC,EAAMqC,QACNrC,EAAMsC,QACNtC,EAAMuC,MACNvC,EAAMwC,SAGP,CAACxC,EAAMyC,cAEV,IAAMS,EAAUlD,EAAMjD,MAAM4F,KAAI,SAACC,EAAKC,GACpC,OAAOD,EAAID,KAAI,SAACG,EAAM3F,GAEpB,OAA8B,IAA1B6C,EAAMjD,MAAM8F,GAAO1F,GAEnB,kBAAC4F,EAAD,CACEjB,WACE9B,EAAMQ,YAAcR,EAAMmD,WAA1B,UACO/B,OADP,YACuBA,SACnBA,OAENW,WAAYX,WACZ4B,IAAK,KAAOH,EAAMhC,WAAa1D,EAAE0D,WACjCe,GAAI,KAAOiB,EAAMhC,WAAa1D,EAAE0D,WAChCQ,QAAS,SAAC+B,GAAD,OACPpD,EAAMqD,UAAUD,EAAG,KAAOP,EAAMhC,WAAa1D,EAAE0D,eAKlB,IAA1Bb,EAAMjD,MAAM8F,GAAO1F,GAE1B,kBAAC4F,EAAD,CACEjB,WAAU,UAAKV,OAAL,YAAqBA,OAC/BW,WAAYX,WACZ4B,IAAK,KAAOH,EAAMhC,WAAa1D,EAAE0D,WACjCe,GAAI,KAAOiB,EAAMhC,WAAa1D,EAAE0D,aAID,IAA1Bb,EAAMjD,MAAM8F,GAAO1F,GAE1B,kBAAC4F,EAAD,CACEjB,WAAU,UAAKV,OAAL,YAAqBA,QAC/BW,WAAYX,WACZ4B,IAAK,KAAOH,EAAMhC,WAAa1D,EAAE0D,WACjCe,GAAI,KAAOiB,EAAMhC,WAAa1D,EAAE0D,YAJlC,UAYA,kBAACkC,EAAD,CACEjB,WACE9B,EAAMQ,YAAcR,EAAMmD,WAA1B,UACO/B,OADP,YACuBA,SACnBA,OAENW,WAAYX,WACZ4B,IAAK,KAAOH,EAAMhC,WAAa1D,EAAE0D,WACjCe,GAAI,KAAOiB,EAAMhC,WAAa1D,EAAE0D,WAChCQ,QAAS,SAAC+B,GAAD,OACPpD,EAAMqD,UAAUD,EAAG,KAAOP,EAAMhC,WAAa1D,EAAE0D,qBAQ3D,OAAO,yBAAKM,UAAWC,aAAoB8B,I,QC9E9BI,EARA,SAACtD,GACd,OACE,4BAAQmB,UAAWC,YAAmBC,QAASrB,EAAMqB,SAClDrB,EAAMgC,W,yBCMEuB,EARA,SAACvD,GACd,OACE,yBAAKmB,UAAWC,cACd,0BAAMD,UAAWC,SAAjB,gB,OCsBSoC,EA1BG,SAACxD,GACjB,IAAIyD,EACAC,EACJ,OAAQ1D,EAAM2D,MACZ,IAAK,UACHF,EAAS,UAAMrC,WACfsC,EAAQ,UAAMtC,WAAN,YAA0BA,UAClC,MACF,IAAK,SACHqC,EAAS,UAAMrC,UACfsC,EAAQ,UAAMtC,WAAN,YAA0BA,UAClC,MACF,QACEqC,EAAS,UAAMrC,WACfsC,EAAQ,UAAMtC,YAGlB,OACE,yBAAKD,UAAWuC,GACd,0BAAMvC,UAAWsC,GACC,YAAfzD,EAAM2D,KAAqB,UAAY,Y,QChBjCC,EAJM,SAAC5D,GACpB,OAAO,wBAAImB,UAAWC,gBAAuBpB,EAAMgC,W,QC4BtC6B,EA5BM,SAAC7D,GACpB,OACE,yBACEmB,UAAWC,eACXC,QAASrB,EAAM8D,OACfnD,MAAOX,EAAM+D,KAAO,CAAE9C,QAAS,GAAM,CAAEA,QAAS,IAEhD,wBAAIE,UAAWC,QACb,kBAAC,EAAD,KACGpB,EAAMQ,UACH,wCACA,gDAEN,kBAAC,EAAD,KACGR,EAAMQ,UACH,yCACA,kDAEN,kBAAC,EAAD,KACGR,EAAMQ,UACH,0BACA,0C,QCJCwD,EAlBE,SAAChE,GAEhB,IADA,IAAIiE,EAAY,GACPjH,EAAI,EAAGA,EAAIgD,EAAM9B,OAAQlB,IAChCiH,EAAUC,KACR,0BACElB,IAAKhG,EACLmE,UACGnB,EAAMN,OAAP,UAEO0B,WAFP,YAE2BA,QADvBA,cAOZ,OAAO,yBAAKD,UAAWC,YAAmB6C,I,QCF7BE,EAZE,SAACnE,GAChB,OACE,yBAAKmB,UAAWC,YACd,kBAAC,EAAD,CAAUlD,OAAQ,EAAGwB,OAAQM,EAAMoE,SAASC,SAAS,OACrD,kBAAC,EAAD,CAAUnG,OAAQ,EAAGwB,OAAQM,EAAMoE,SAASC,SAAS,OACrD,kBAAC,EAAD,CAAUnG,OAAQ,EAAGwB,OAAQM,EAAMoE,SAASC,SAAS,SACrD,kBAAC,EAAD,CAAUnG,OAAQ,EAAGwB,OAAQM,EAAMoE,SAASC,SAAS,SACrD,kBAAC,EAAD,CAAUnG,OAAQ,EAAGwB,OAAQM,EAAMoE,SAASC,SAAS,SCulB5CC,EArlBF,WAAO,IAAD,EACiBC,oBAAS,GAD1B,mBACV/D,EADU,KACCgE,EADD,OAEmBD,oBAAS,GAF5B,mBAEVE,EAFU,KAEEC,EAFF,OAGmBH,oBAAS,GAH5B,mBAGVpB,EAHU,KAGEwB,EAHF,OAIqBJ,oBAAS,GAJ9B,mBAIV9B,EAJU,KAIGmC,EAJH,OAKOL,mBAAS,OALhB,mBAKVZ,EALU,KAKJkB,EALI,OAMON,oBAAS,GANhB,mBAMVR,EANU,KAMJe,EANI,OAOeP,mBAAS,IAPxB,mBAOVH,EAPU,KAOAW,EAPA,KASXC,EAAc1F,IATH,EAWWiF,mBAASS,EAAYrF,eAAe,MAX/C,mBAWVsF,EAXU,KAWFC,EAXE,OAYeX,mBAASS,EAAYrF,eAAe,QAZnD,mBAYVwF,EAZU,KAYAC,EAZA,OAaeb,mBAASS,EAAYrF,eAAe,QAbnD,mBAaV0F,EAbU,KAaAC,GAbA,QAcWf,mBAASS,EAAYrF,eAAe,MAd/C,qBAcV4F,GAdU,MAcFC,GAdE,SAeWjB,mBAASS,EAAYrF,eAAe,MAf/C,qBAeV8F,GAfU,MAeFC,GAfE,SAiBanB,mBAASS,EAAYrF,eAAe,MAjBjD,qBAiBVgG,GAjBU,MAiBDC,GAjBC,SAkBiBrB,mBAASS,EAAYrF,eAAe,QAlBrD,qBAkBVkG,GAlBU,MAkBCC,GAlBD,SAmBiBvB,mBAASS,EAAYrF,eAAe,QAnBrD,qBAmBVoG,GAnBU,MAmBCC,GAnBD,SAoBazB,mBAASS,EAAYrF,eAAe,MApBjD,qBAoBVsG,GApBU,MAoBDC,GApBC,SAqBa3B,mBAASS,EAAYrF,eAAe,MArBjD,qBAqBVwG,GArBU,MAqBDC,GArBC,MAuBXC,GAAexJ,IAvBJ,GAyBqB0H,mBAAS8B,GAAavH,iBAzB3C,qBAyBVwH,GAzBU,MAyBGC,GAzBH,SA0BuBhC,mBACtC8B,GAAarH,kBA3BE,qBA0BVwH,GA1BU,MA0BIC,GA1BJ,SA6BmBlC,mBAAS8B,GAAatH,gBA7BzC,qBA6BV2H,GA7BU,MA6BEC,GA7BF,SA+BapC,mBAAS8B,GAAavH,iBA/BnC,qBA+BV8H,GA/BU,MA+BDC,GA/BC,SAgCetC,mBAAS8B,GAAarH,kBAhCrC,qBAgCV8H,GAhCU,MAgCAC,GAhCA,SAiCWxC,mBAAS8B,GAAatH,gBAjCjC,qBAiCViI,GAjCU,MAiCFC,GAjCE,SAmCe1C,mBAAS,MAnCxB,qBAmCV2C,GAnCU,MAmCAC,GAnCA,SAoCmB5C,mBAAS,IApC5B,qBAoCV6C,GApCU,MAoCEC,GApCF,SAqCiB9C,mBAAS,MArC1B,qBAqCV+C,GArCU,MAqCCC,GArCD,SAsCWhD,mBAAS,MAtCpB,qBAsCViD,GAtCU,MAsCFC,GAtCE,MAmMXC,GAAc,SAAC7I,GAEnB,IAAI8I,EACA9H,EACJ,OAAQhB,GACN,IAAK,IAIH,OAHAgB,EAAUmF,EAAYpF,IAAIqF,GAC1B0C,EAAO3C,EAAYtF,OAAOG,GAC1BqF,EAAUrF,GACH8H,EACT,IAAK,MAIH,OAHA9H,EAAUmF,EAAYpF,IAAIuF,GAC1BwC,EAAO3C,EAAYtF,OAAOG,GAC1BuF,EAAYvF,GACL8H,EACT,IAAK,MAIH,OAHA9H,EAAUmF,EAAYpF,IAAIyF,GAC1BsC,EAAO3C,EAAYtF,OAAOG,GAC1ByF,GAAYzF,GACL8H,EACT,IAAK,IAIH,OAHA9H,EAAUmF,EAAYpF,IAAI2F,IAC1BoC,EAAO3C,EAAYtF,OAAOG,GAC1B2F,GAAU3F,GACH8H,EACT,IAAK,IAIH,OAHA9H,EAAUmF,EAAYpF,IAAI6F,IAC1BkC,EAAO3C,EAAYtF,OAAOG,GAC1B6F,GAAU7F,GACH8H,EACT,QACE,OAAO,IAkBPC,GAAY,WAChB,OAAQJ,IACN,IAAK,OACHC,GAAU,MACV,MACF,IAAK,KACHA,GAAU,QACV,MACF,IAAK,QACHA,GAAU,QACV,MACF,IAAK,OACHA,GAAU,SACV,MACF,QACE,OAAO,IAIPI,GAAc,SAAC9K,EAAOQ,GAC1B,IAAIU,EAAWJ,KAAKC,MAAMD,KAAKE,UAAUhB,IACrCa,EAAUC,KAAKC,MAAMD,KAAKE,UAAUR,IAExC,GAAiB,OAAb2J,IAA2C,IAAtBE,GAAWlJ,OAAc,CAChD,IAAI4J,EAASzB,GAAa1H,oBAAoBV,EAAUL,GAExD,GAA0C,IAAtC0I,GAAYwB,EAAO,IAAIA,EAAO,IAAW,CAC3C,IAAIjJ,EAASwH,GAAaxH,OAAO2H,GAAcsB,EAAO,GAAIA,EAAO,IACtDJ,GAAY7I,IACZsI,GAAY,CAACW,EAAO,GAAIA,EAAO,GAAIjJ,IAEhD0H,GAAeuB,EAAO,IACtBnB,GAAcmB,EAAO,IACrBpD,GAAc,GAEV2B,GAAahI,YAAYyJ,EAAO,MAClCjD,EAAQ,UACRF,GAAc,GACdD,GAAc,SAIhB,GAAe,OAAX8C,GAAiB,CAEnB,IAAIO,EAAgB,CAACb,GAAS,GAAIA,GAAS,IACvCc,EA5HW,SAAChL,EAAGC,GAEvB,IAAIgL,EAAY,GAyBhB,OAvBEjL,EAAI,EAAI,IACkB,IAA1BsJ,GAAYtJ,EAAI,GAAGC,IACO,IAA1BqJ,GAAYtJ,EAAI,GAAGC,IAEnBgL,EAAU/D,KAAK,CAAClH,EAAI,EAAGC,EAAG,SAE1BD,EAAI,GAAK,GACiB,IAA1BsJ,GAAYtJ,EAAI,GAAGC,IACO,IAA1BqJ,GAAYtJ,EAAI,GAAGC,IAEnBgL,EAAU/D,KAAK,CAAClH,EAAI,EAAGC,EAAG,OAE1BA,EAAI,EAAI,IACkB,IAA1BqJ,GAAYtJ,GAAGC,EAAI,IACO,IAA1BqJ,GAAYtJ,GAAGC,EAAI,IAEnBgL,EAAU/D,KAAK,CAAClH,EAAGC,EAAI,EAAG,UAE1BA,EAAI,GAAK,GACiB,IAA1BqJ,GAAYtJ,GAAGC,EAAI,IACO,IAA1BqJ,GAAYtJ,GAAGC,EAAI,IAEnBgL,EAAU/D,KAAK,CAAClH,EAAGC,EAAI,EAAG,SACrBgL,EAiGYC,CAAaH,EAAc,GAAIA,EAAc,IACxDI,EAAYH,EAASzJ,KAAKC,MAAMD,KAAKE,SAAWuJ,EAAS9J,SACzDkK,EAAa/B,GAAajI,cAC5BH,EACAL,EACAuK,EAAU,GACVA,EAAU,IAMZ,GAJA5B,GAAe6B,EAAW,IAC1BzB,GAAcyB,EAAW,IACzB1D,GAAc,GAEoC,IAA9C0D,EAAW,GAAGD,EAAU,IAAIA,EAAU,IAAW,CAC/C9B,GAAahI,YAAY+J,EAAW,MACtCvD,EAAQ,UACRF,GAAc,GACdD,GAAc,IAEhB,IAAI7F,EAASwH,GAAaxH,OACxB2H,GACA2B,EAAU,GACVA,EAAU,IAERR,EAAOD,GAAY7I,GAEvB,GAAIA,IAAWqI,GAAS,GAEjBS,EAICP,GAAWlJ,OAAS,GACtBiJ,GAAY,YAAIC,GAAW,KAC3BG,GAAa,MACbE,GAAU,MACVJ,GAAcD,GAAWiB,MAAM,MAE/BlB,GAAY,MACZI,GAAa,MACbE,GAAU,QAXZA,GAAUU,EAAU,IACpBZ,GAAa,CAACY,EAAU,GAAIA,EAAU,UAanC,CAEL,IAAIG,EAAgBzK,KAAKC,MAAMD,KAAKE,UAAUqJ,KAC9CkB,EAAcpE,KAAK,CAACiE,EAAU,GAAIA,EAAU,GAAItJ,IAChDwI,GAAciB,SAGb,CAEL,IAAIC,EACAC,EACAC,EAAW,YAAOnB,IACtB,OAAQE,IACN,IAAK,OACHe,EAAW,CAACE,EAAY,GAAK,EAAGA,EAAY,IAC5CD,EAAW,CAACtB,GAAS,GAAK,EAAGA,GAAS,IACtC,MACF,IAAK,KACHqB,EAAW,CAACE,EAAY,GAAK,EAAGA,EAAY,IAC5CD,EAAW,CAACtB,GAAS,GAAK,EAAGA,GAAS,IACtC,MACF,IAAK,QACHqB,EAAW,CAACE,EAAY,GAAIA,EAAY,GAAK,GAC7CD,EAAW,CAACtB,GAAS,GAAIA,GAAS,GAAK,GACvC,MACF,IAAK,OACHqB,EAAW,CAACE,EAAY,GAAIA,EAAY,GAAK,GAC7CD,EAAW,CAACtB,GAAS,GAAIA,GAAS,GAAK,GACvC,MACF,QACE,OAAO,EAaX,GAVkB,KAAhBqB,EAAS,KACQ,IAAjBA,EAAS,IACO,KAAhBA,EAAS,KACQ,IAAjBA,EAAS,KAGTA,EAAQ,YAAOC,GACfZ,MAG4C,IAA1CtB,GAAYiC,EAAS,IAAIA,EAAS,IAAW,CAC/C,IAAI1J,EAASwH,GAAaxH,OACxB2H,GACA+B,EAAS,GACTA,EAAS,IAEPZ,EAAOD,GAAY7I,GACnBiJ,EAASzB,GAAajI,cACxBH,EACAL,EACA2K,EAAS,GACTA,EAAS,IAEXhC,GAAeuB,EAAO,IACtBnB,GAAcmB,EAAO,IACrBpD,GAAc,GACV2B,GAAahI,YAAYyJ,EAAO,MAClCjD,EAAQ,UACRF,GAAc,GACdD,GAAc,IAEXiD,EAGCP,GAAWlJ,OAAS,GACtBiJ,GAAY,YAAIC,GAAW,KAC3BG,GAAa,MACbE,GAAU,MACVJ,GAAcD,GAAWiB,MAAM,MAE/BlB,GAAY,MACZI,GAAa,MACbE,GAAU,OAVZF,GAAa,CAACgB,EAAS,GAAIA,EAAS,SAajC,CACL,IAAIG,EAAY,YAAOxB,IAGvB,GAFAK,GAAamB,GACbd,MAE4C,IAA1CtB,GAAYiC,EAAS,IAAIA,EAAS,KACQ,IAA1CjC,GAAYiC,EAAS,IAAIA,EAAS,OAElCA,EAAQ,YAAOC,GAC+B,IAA1ClC,GAAYiC,EAAS,IAAIA,EAAS,KAAW,CAC/C,IAAII,EAAatC,GAAaxH,OAC5B2H,GACA+B,EAAS,GACTA,EAAS,IAEMb,GAAYiB,KAE3BpB,GAAa,MACbJ,GAAY,MACZM,GAAU,OAnBX,MAuByBpB,GAAajI,cACzCH,EACAL,EACA2K,EAAS,GACTA,EAAS,IA3BN,mBAuBEK,EAvBF,KAuBaC,EAvBb,KA6BLtC,GAAeqC,GACfjC,GAAckC,GACdnE,GAAc,GACV2B,GAAahI,YAAYwK,KAC3BhE,EAAQ,UACRF,GAAc,GACdD,GAAc,OAOxBxC,qBAAU,WACHuC,GAAetB,GAClB2F,YAAW,kBAAMjB,GAAYvB,GAAaI,MAAa,QAGxD,CAACjC,IA6FJ,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWtB,WAAYA,EAAYQ,KAAMA,IACzC,kBAAC,EAAD,CAAcnD,UAAWA,EAAWsD,OA7fzB,WACbgB,GAASf,IA4f6CA,KAAMA,IAC1D,kBAAC,EAAD,CAAUK,SAAUA,IACpB,yBAAKjD,UAAWC,IAAQ2H,UACtB,yBAAK5H,UAAWC,IAAQ4H,YACtB,kBAACA,EAAD,CACEC,OAAO,aACPxG,YAAaA,EACbjC,UAAWA,EACXzD,MAAOuJ,GACPhJ,OAAQkJ,GACRrE,iBAre2B,SAAC+G,EAAO9G,EAAO+G,EAAO5G,EAAOC,GAChE,IAAI4G,EAAW/C,GAAa/H,gBAC1BgI,GACAE,GACAE,GACA,KAEF0C,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,OAEFA,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,OAEFA,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,KAEFA,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,KAEF7C,GAAe6C,EAAS,IACxB3C,GAAgB2C,EAAS,IACzBzC,GAAcyC,EAAS,KAqcfzH,WAlcS,SAACnE,EAAMR,EAAGC,EAAGQ,GAE9B,IAAI4L,EAAehD,GAAahJ,UAC9BiJ,GACAE,GACAE,GACAlJ,EACAR,EACAC,EACAQ,GAEF,QAAI4L,IACF9C,GAAe8C,EAAa,IAC5B5C,GAAgB4C,EAAa,IAC7B1C,GAAc0C,EAAa,KACpB,IAobDjH,MAAO6C,EACP5C,QAAS8C,EACT7C,QAAS+C,EACT9C,MAAOgD,GACP/C,MAAOiD,GACPhF,OAAQ0C,EACR7B,UArVQ,SAAC9D,GAEjB,IAAI6L,EAAehD,GAAajH,kBAC9BkH,GACAE,GACAhJ,GAEF,QAAI6L,IACF9C,GAAe8C,EAAa,IAC5B5C,GAAgB4C,EAAa,KACtB,OA8UL,kBAACC,EAAD,CACEL,OAAO,SACPxG,YAAaA,EACbY,UAvHU,SAACkG,EAAO3H,GACxB,IAAKpB,IAAciE,EACjB,OAAO,EAEP,IAAMzH,EAAI4E,EAAGjE,OAAO,GACdV,EAAI2E,EAAGjE,OAAO,GAEpB,GADA+G,GAAc,GACQ,IAAlBkC,GAAQ5J,GAAGC,GAAU,CAAC,IAAD,EACSoJ,GAAajI,cAC3CwI,GACAI,GACAhK,EACAC,GALqB,mBAChBuM,EADgB,KACJC,EADI,KAOvB5C,GAAW2C,GACXvC,GAAUwC,QACL,GAAsB,IAAlB7C,GAAQ5J,GAAGC,GAAU,CAAC,IAU3B4C,EAV0B,EACEwG,GAAajI,cAC3CwI,GACAI,GACAhK,EACAC,GAL4B,mBACvBuM,EADuB,KACXC,EADW,KAY9B,OALA5C,GAAW2C,GACXvC,GAAUwC,GACGpD,GAAaxH,OAAOiI,GAAU9J,EAAGC,IAI5C,IAAK,IAGH,GAFA4C,EAAUmF,EAAYpF,IAAI+F,IACnBX,EAAYtF,OAAOG,GAChB,CACR,IAAI6J,EAAW,YAAOtF,GACtBsF,EAAYxF,KAAK,KACjBa,EAAY2E,GAEd9D,GAAW/F,GACX,MACF,IAAK,MAGH,GAFAA,EAAUmF,EAAYpF,IAAIiG,IACnBb,EAAYtF,OAAOG,GAChB,CACR,IAAI6J,EAAW,YAAOtF,GACtBsF,EAAYxF,KAAK,OACjBa,EAAY2E,GAEd5D,GAAajG,GACb,MACF,IAAK,MAGH,GAFAA,EAAUmF,EAAYpF,IAAImG,IACnBf,EAAYtF,OAAOG,GAChB,CACR,IAAI6J,EAAW,YAAOtF,GACtBsF,EAAYxF,KAAK,OACjBa,EAAY2E,GAEd1D,GAAanG,GACb,MACF,IAAK,IAGH,GAFAA,EAAUmF,EAAYpF,IAAIqG,IACnBjB,EAAYtF,OAAOG,GAChB,CACR,IAAI6J,EAAW,YAAOtF,GACtBsF,EAAYxF,KAAK,KACjBa,EAAY2E,GAEdxD,GAAWrG,GACX,MACF,IAAK,IAGH,GAFAA,EAAUmF,EAAYpF,IAAIuG,IACnBnB,EAAYtF,OAAOG,GAChB,CACR,IAAI6J,EAAW,YAAOtF,GACtBsF,EAAYxF,KAAK,KACjBa,EAAY2E,GAEdtD,GAAWvG,GACX,MACF,QACE,OAAO,EAEPwG,GAAahI,YAAYoL,KAC3B5E,EAAQ,WACRF,GAAc,GACdD,GAAc,MAmCdvC,iBA7byB,SAAC+G,EAAO9G,EAAO+G,EAAO5G,EAAOC,GAE5D,IAAI4G,EAAW/C,GAAa/H,gBAAgBsI,GAASE,GAAUE,GAAQ,KACvEoC,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,OAEFA,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,OAEFA,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,KAEFA,EAAW/C,GAAa/H,gBACtB8K,EAAS,GACTA,EAAS,GACTA,EAAS,GACT,KAEFvC,GAAWuC,EAAS,IACpBrC,GAAYqC,EAAS,IACrBnC,GAAUmC,EAAS,KAiab5I,UAAWA,EACXC,OAAQ0C,EACRpG,MAAO6J,GACPtJ,OAAQwJ,GACR1E,MAAOuD,GACPtD,QAASwD,GACTvD,QAASyD,GACTxD,MAAO0D,GACPzD,MAAO2D,MAGX,kBAAC,EAAD,CAAQ9E,QAASb,EA9hBH,WAChB0E,EAAUF,EAAYrF,eAAe,MACrCyF,EAAYJ,EAAYrF,eAAe,QACvC2F,GAAYN,EAAYrF,eAAe,QACvC6F,GAAUR,EAAYrF,eAAe,MACrC+F,GAAUV,EAAYrF,eAAe,MACrCiG,GAAWZ,EAAYrF,eAAe,MACtCmG,GAAad,EAAYrF,eAAe,QACxCqG,GAAahB,EAAYrF,eAAe,QACxCuG,GAAWlB,EAAYrF,eAAe,MACtCyG,GAAWpB,EAAYrF,eAAe,MACtC4G,GAAeF,GAAavH,iBAC5B2H,GAAgBJ,GAAarH,kBAC7B2H,GAAcN,GAAatH,gBAC3B8H,GAAWR,GAAavH,iBACxBiI,GAAYV,GAAarH,kBACzBiI,GAAUZ,GAAatH,gBACvBoI,GAAY,MACZE,GAAc,IACdE,GAAa,MACbE,GAAU,MACVjD,GAAa,GACbG,GAAc,GACdD,GAAc,GACdE,GAAgBnC,GAChBoC,EAAQ,OACRC,GAAQ,GACRC,EAAY,KAnCI,WAChBP,GAAa,KAsiBRhE,EAAY,eAAiB,gB,sBC5kBvBmJ,MAVf,WACE,OACE,yBAAKxI,UAAU,OACb,kBAACyI,EAAA,EAAD,CAAaC,QAASC,KACpB,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f3cc703.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"AiGrid_Container__1wiLh\",\"Item\":\"AiGrid_Item__2qbVa\",\"CellText\":\"AiGrid_CellText__27DMc\",\"Hit\":\"AiGrid_Hit__24W49\",\"Miss\":\"AiGrid_Miss__9s3QP\",\"Hover\":\"AiGrid_Hover__1EP12\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"PlayerGrid_Container__1xAnN\",\"Item\":\"PlayerGrid_Item__vu6ek\",\"CellText\":\"PlayerGrid_CellText__2iHiv\",\"Hit\":\"PlayerGrid_Hit__30_0x\",\"Miss\":\"PlayerGrid_Miss__19nxv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Victory\":\"Announcer_Victory__2HxYA\",\"Defeat\":\"Announcer_Defeat__yoarC\",\"Default\":\"Announcer_Default__1GHEW\",\"TextCont\":\"Announcer_TextCont__28YD0\",\"Appear\":\"Announcer_Appear__1gm3I\",\"fadeIn\":\"Announcer_fadeIn__1YE8L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shipPart\":\"SunkShip_shipPart__80v-V\",\"shipCont\":\"SunkShip_shipCont__15ijl\",\"sunk\":\"SunkShip_sunk__1oNnh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GridCont\":\"Game_GridCont__1gm9s\",\"PlayerGrid\":\"Game_PlayerGrid__3L2gH\",\"Hit\":\"Game_Hit__2Rl4t\",\"Miss\":\"Game_Miss__1gxAm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderCont\":\"Header_HeaderCont___mmPf\",\"Title\":\"Header_Title__3TqbF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TutorialCont\":\"TutorialCont_TutorialCont__2J1f-\",\"List\":\"TutorialCont_List__1AnQY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Ship\":\"Ship_Ship__15zAC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StartGame\":\"Button_StartGame__JSmuh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TutorialItem\":\"TutorialItem_TutorialItem__yYbAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SunkCont\":\"SunkCont_SunkCont__3tj4w\"};","const createGameboard = () => {\n  const getInitialBoard = () => {\n    return [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ];\n  };\n\n  const getInitialData = () => {\n    return {\n      totalHP: 0,\n    };\n  };\n\n  const getInitialCoords = () => {\n    return {\n      2: [],\n      \"3_1\": [],\n      \"3_2\": [],\n      4: [],\n      5: [],\n    };\n  };\n\n  const isOverCheck = (boardData) => {\n    if (boardData.totalHP === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const checkX = (board, x, y, z) => {\n    // checks if there's space on X axis\n    if (y + z - 1 > 9) {\n      return false;\n    } else {\n      for (let i = 0; i < z; i++) {\n        if (board[x][y + i] === 0) {\n          if (i === z - 1) {\n            return true;\n          }\n        } else {\n          return false;\n        }\n      }\n    }\n  };\n\n  const checkY = (board, x, y, z) => {\n    // checks if there's space on Y axis\n    if (x + z - 1 > 9) {\n      return false;\n    } else {\n      for (let i = 0; i < z; i++) {\n        if (board[x + i][y] === 0) {\n          if (i === z - 1) {\n            return true;\n          }\n        } else {\n          return false;\n        }\n      }\n    }\n  };\n\n  const changeOrientation = (board, coords, ship) => {\n    // change orientation from x to y and vice versa if possible\n    let newOri = coords[ship][2] === \"x\" ? \"y\" : \"x\";\n    if (\n      newOri === \"x\" &&\n      checkX(\n        board,\n        coords[ship][0],\n        coords[ship][1] + 1,\n        parseInt(ship.charAt(0)) - 1\n      )\n    ) {\n      let newCoords = JSON.parse(JSON.stringify(coords));\n      let newBoard = JSON.parse(JSON.stringify(board));\n      for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n        newBoard[coords[ship][0] + z][coords[ship][1]] = 0;\n      }\n      for (let i = 0; i < parseInt(ship.charAt(0)); i++) {\n        newBoard[coords[ship][0]][coords[ship][1] + i] = 1;\n      }\n      newCoords[ship] = [coords[ship][0], coords[ship][1], newOri];\n      return [newBoard, newCoords];\n    } else if (\n      newOri === \"y\" &&\n      checkY(\n        board,\n        coords[ship][0] + 1,\n        coords[ship][1],\n        parseInt(ship.charAt(0)) - 1\n      )\n    ) {\n      let newCoords = JSON.parse(JSON.stringify(coords));\n      let newBoard = JSON.parse(JSON.stringify(board));\n      for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n        newBoard[coords[ship][0]][coords[ship][1] + z] = 0;\n      }\n      for (let i = 0; i < parseInt(ship.charAt(0)); i++) {\n        newBoard[coords[ship][0] + i][coords[ship][1]] = 1;\n      }\n      newCoords[ship] = [coords[ship][0], coords[ship][1], newOri];\n      return [newBoard, newCoords];\n    } else {\n      return false;\n    }\n  };\n\n  const placeShip = (board, coords, boardData, ship, x, y, orientation) => {\n    if (orientation === \"x\" && checkX(board, x, y, parseInt(ship.charAt(0)))) {\n      let newData = JSON.parse(JSON.stringify(boardData));\n      let newCoords = JSON.parse(JSON.stringify(coords));\n      let newBoard = JSON.parse(JSON.stringify(board));\n      if (coords[ship].length !== 0) {\n        if (coords[ship][2] === \"x\") {\n          for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n            newBoard[coords[ship][0]][coords[ship][1] + z] = 0;\n          }\n        } else {\n          for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n            newBoard[coords[ship][0] + z][coords[ship][1]] = 0;\n          }\n        }\n        newData.totalHP -= parseInt(ship.charAt(0));\n      }\n      for (let i = 0; i < parseInt(ship.charAt(0)); i++) {\n        newBoard[x][y + i] = 1;\n      }\n      newData.totalHP += parseInt(ship.charAt(0));\n      newCoords[ship] = [x, y, orientation];\n      return [newBoard, newCoords, newData];\n    } else if (\n      orientation === \"y\" &&\n      checkY(board, x, y, parseInt(ship.charAt(0)))\n    ) {\n      let newData = JSON.parse(JSON.stringify(boardData));\n      let newCoords = JSON.parse(JSON.stringify(coords));\n      let newBoard = JSON.parse(JSON.stringify(board));\n      if (coords[ship].length !== 0) {\n        if (coords[ship][2] === \"x\") {\n          for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n            newBoard[coords[ship][0]][coords[ship][1] + z] = 0;\n          }\n        } else {\n          for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n            newBoard[coords[ship][0] + z][coords[ship][1]] = 0;\n          }\n        }\n        newData.totalHP -= parseInt(ship.charAt(0));\n      }\n      for (let i = 0; i < parseInt(ship.charAt(0)); i++) {\n        newBoard[x + i][y] = 1;\n      }\n      newData.totalHP += parseInt(ship.charAt(0));\n      newCoords[ship] = [x, y, orientation];\n      return [newBoard, newCoords, newData];\n    } else {\n      return false;\n    }\n  };\n\n  const randomPlaceShip = (board, coords, boardData, ship) => {\n    let x;\n    let y;\n    let orientation;\n    while (true) {\n      do {\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n        Math.floor(Math.random() * 2) === 0\n          ? (orientation = \"x\")\n          : (orientation = \"y\");\n      } while (board[x][y] !== 0);\n      let correctPS = placeShip(\n        board,\n        coords,\n        boardData,\n        ship,\n        x,\n        y,\n        orientation\n      );\n      if (correctPS) {\n        return correctPS;\n      }\n    }\n  };\n\n  const receiveAttack = (board, boardData, x, y) => {\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let newData = JSON.parse(JSON.stringify(boardData));\n    switch (board[x][y]) {\n      case 0:\n        newBoard[x][y] = 3;\n        return [newBoard, newData];\n      case 1:\n        newBoard[x][y] = 2;\n        newData.totalHP -= 1;\n        return [newBoard, newData];\n      default:\n        return false;\n    }\n  };\n\n  const receiveRandomAttack = (board, boardData) => {\n    let played = false;\n    let x;\n    let y;\n    do {\n      x = Math.floor(Math.random() * 10);\n      y = Math.floor(Math.random() * 10);\n      if (board[x][y] === 0 || board[x][y] === 1) {\n        played = true;\n      }\n    } while (played === false);\n    return [x, y, ...receiveAttack(board, boardData, x, y)];\n  };\n\n  const shipAt = (coords, x, y) => {\n    // checks what ship got hit\n    for (let ship in coords) {\n      if (coords[ship][0] === parseInt(x)) {\n        if (coords[ship][2] === \"x\") {\n          for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n            if (coords[ship][1] + z === parseInt(y)) {\n              return ship;\n            }\n          }\n        } else {\n          if (coords[ship][1] === parseInt(y)) {\n            for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n              if (coords[ship][0] + z === parseInt(x)) {\n                return ship;\n              }\n            }\n          }\n        }\n      } else if (coords[ship][1] === parseInt(y)) {\n        if (coords[ship][2] === \"y\") {\n          for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n            if (coords[ship][0] + z === parseInt(x)) {\n              return ship;\n            }\n          }\n        } else {\n          if (coords[ship][0] === parseInt(x)) {\n            for (let z = 0; z < parseInt(ship.charAt(0)); z++) {\n              if (coords[ship][1] + z === parseInt(y)) {\n                return ship;\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  return {\n    placeShip,\n    receiveAttack,\n    isOverCheck,\n    randomPlaceShip,\n    receiveRandomAttack,\n    shipAt,\n    getInitialBoard,\n    getInitialData,\n    getInitialCoords,\n    changeOrientation,\n  };\n};\n\nexport default createGameboard;\n","const createShip = (name) => {\n  let ships = {\n    2: {\n      length: 2,\n      hp: 2,\n      isSunk: false,\n    },\n    \"3_1\": {\n      length: 3,\n      hp: 3,\n      isSunk: false,\n    },\n    \"3_2\": {\n      length: 3,\n      hp: 3,\n      isSunk: false,\n    },\n    4: {\n      length: 4,\n      hp: 4,\n      isSunk: false,\n    },\n    5: {\n      length: 5,\n      hp: 5,\n      isSunk: false,\n    },\n  };\n\n  const getInitialShip = (name) => {\n    return {\n      name: name,\n      length: ships[name].length,\n      hp: ships[name].hp,\n      isSunk: false,\n    };\n  };\n\n  const hit = (ship) => {\n    let newShip = JSON.parse(JSON.stringify(ship));\n    newShip.hp -= 1;\n    return newShip;\n  };\n\n  const isSunk = (ship) => {\n    if (ship.hp === 0) {\n      ship.isSunk = true;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return {\n    getInitialShip,\n    hit,\n    isSunk,\n  };\n};\n\nexport default createShip;\n","export const ItemTypes = {\n  SHIP: \"ship\",\n};\n","import React from \"react\";\nimport classes from \"./Ship.module.css\";\nimport { useDrag } from \"react-dnd\";\nimport { ItemTypes } from \"../../reactdnd/constants\";\n\nconst Ship = (props) => {\n  // react-dnd allow this component to be dragable\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: ItemTypes.SHIP,\n      name: props.ship.name,\n      coords: props.coords[props.ship.name][2],\n    },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n    canDrag: !props.isStarted && !props.isOver,\n  });\n  let ship;\n  let style = {\n    height: `${\n      props.coords[props.ship.name][2] === \"x\"\n        ? \"33px\"\n        : (props.ship.length * 32 + 1).toString() + \"px\"\n    }`,\n    width: `${\n      props.coords[props.ship.name][2] === \"x\"\n        ? (props.ship.length * 32 + 1).toString() + \"px\"\n        : \"33px\"\n    }`,\n    top: `${(props.coords[props.ship.name][0] * 32).toString() + \"px\"}`,\n    left: `${(props.coords[props.ship.name][1] * 32).toString() + \"px\"}`,\n    opacity: `${isDragging ? \"0\" : \"1\"}`,\n  };\n  ship = (\n    <div\n      ref={drag}\n      className={classes.Ship}\n      style={style}\n      onClick={\n        !props.isStarted && !props.isOver\n          ? () => props.changeOri(props.ship.name)\n          : null\n      }\n    />\n  );\n\n  return ship;\n};\n\nexport default Ship;\n","import React from \"react\";\nimport { ItemTypes } from \"../../../reactdnd/constants\";\nimport { useDrop } from \"react-dnd\";\n\nconst Cell = (props) => {\n  // react-dnd drop target\n  const [{ ship }, drop] = useDrop({\n    accept: ItemTypes.SHIP,\n    drop: () => {\n      props.placeShips(\n        ship.name,\n        parseInt(props.id.charAt(0)),\n        parseInt(props.id.charAt(1)),\n        ship.coords\n      );\n      return undefined;\n    },\n    collect: (monitor) => ({\n      ship: monitor.getItem(),\n    }),\n  });\n\n  return (\n    <div\n      className={props.outerClass}\n      id={props.id}\n      onClick={props.onClick}\n      ref={drop}\n    >\n      <span className={props.innerClass}>{props.children}</span>\n    </div>\n  );\n};\n\nexport default Cell;\n","import React, { useEffect } from \"react\";\nimport Ship from \"../../Ship/Ship\";\nimport GridCell from \"../GridCell/GridCell\";\nimport * as classes from \"./PlayerGrid.module.css\";\n\nconst Grid = (props) => {\n  useEffect(() => {\n    props.randomPlaceShips(\n      props.ship2,\n      props.ship3_1,\n      props.ship3_2,\n      props.ship4,\n      props.ship5\n    );\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    props.randomPlaceShips(\n      props.ship2,\n      props.ship3_1,\n      props.ship3_2,\n      props.ship4,\n      props.ship5\n    );\n    // eslint-disable-next-line\n  }, [props.shouldPlace]);\n\n  const playerGrid = props.board.map((row, index) => {\n    return row.map((cell, i) => {\n      if (props.board[index][i] === 0) {\n        // cell is empty\n        return (\n          <GridCell\n            outerClass={classes.Item}\n            innerClass={classes.CellText}\n            key={index.toString() + i.toString()}\n            id={index.toString() + i.toString()}\n            placeShips={props.placeShips}\n          />\n        );\n      } else if (props.board[index][i] === 2) {\n        // cell is a hit\n        return (\n          <GridCell\n            outerClass={`${classes.Item} ${classes.Hit}`}\n            innerClass={classes.CellText}\n            key={index.toString() + i.toString()}\n            id={index.toString() + i.toString()}\n            placeShips={props.placeShips}\n          />\n        );\n      } else if (props.board[index][i] === 3) {\n        // cell is a miss\n        return (\n          <GridCell\n            outerClass={`${classes.Item} ${classes.Miss}`}\n            innerClass={classes.CellText}\n            key={index.toString() + i.toString()}\n            id={index.toString() + i.toString()}\n            placeShips={props.placeShips}\n          >\n            •\n          </GridCell>\n        );\n      } else {\n        // cell is a ship\n        return (\n          <GridCell\n            outerClass={classes.Item}\n            innerClass={classes.CellText}\n            key={index.toString() + i.toString()}\n            id={index.toString() + i.toString()}\n            placeShips={props.placeShips}\n          />\n        );\n      }\n    });\n  });\n\n  return (\n    <div className={classes.Container}>\n      <React.Fragment>\n        {playerGrid}\n        <Ship\n          coords={props.coords}\n          ship={props.ship2}\n          isStarted={props.isStarted}\n          isOver={props.isOver}\n          changeOri={props.changeOri}\n        />\n        <Ship\n          coords={props.coords}\n          ship={props.ship3_1}\n          isStarted={props.isStarted}\n          isOver={props.isOver}\n          changeOri={props.changeOri}\n        />\n        <Ship\n          coords={props.coords}\n          ship={props.ship3_2}\n          isStarted={props.isStarted}\n          isOver={props.isOver}\n          changeOri={props.changeOri}\n        />\n        <Ship\n          coords={props.coords}\n          ship={props.ship4}\n          isStarted={props.isStarted}\n          isOver={props.isOver}\n          changeOri={props.changeOri}\n        />\n        <Ship\n          coords={props.coords}\n          ship={props.ship5}\n          isStarted={props.isStarted}\n          isOver={props.isOver}\n          changeOri={props.changeOri}\n        />\n      </React.Fragment>\n    </div>\n  );\n};\n\nexport default Grid;\n","import React, { useEffect } from \"react\";\nimport GridCell from \"../GridCell/GridCell\";\nimport * as classes from \"./AiGrid.module.css\";\n\nconst Grid = (props) => {\n  useEffect(() => {\n    props.randomPlaceShips(\n      props.ship2,\n      props.ship3_1,\n      props.ship3_2,\n      props.ship4,\n      props.ship5\n    );\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    props.randomPlaceShips(\n      props.ship2,\n      props.ship3_1,\n      props.ship3_2,\n      props.ship4,\n      props.ship5\n    );\n    // eslint-disable-next-line\n  }, [props.shouldPlace]);\n\n  const newGrid = props.board.map((row, index) => {\n    return row.map((cell, i) => {\n      // cell is empty\n      if (props.board[index][i] === 0) {\n        return (\n          <GridCell\n            outerClass={\n              props.isStarted && !props.gameIsOver\n                ? `${classes.Item} ${classes.Hover}`\n                : classes.Item\n            }\n            innerClass={classes.CellText}\n            key={\"AI\" + index.toString() + i.toString()}\n            id={\"AI\" + index.toString() + i.toString()}\n            onClick={(e) =>\n              props.playRound(e, \"AI\" + index.toString() + i.toString())\n            }\n          />\n        );\n        // cell is a hit\n      } else if (props.board[index][i] === 2) {\n        return (\n          <GridCell\n            outerClass={`${classes.Item} ${classes.Hit}`}\n            innerClass={classes.CellText}\n            key={\"AI\" + index.toString() + i.toString()}\n            id={\"AI\" + index.toString() + i.toString()}\n          />\n        );\n        // cell is a miss\n      } else if (props.board[index][i] === 3) {\n        return (\n          <GridCell\n            outerClass={`${classes.Item} ${classes.Miss}`}\n            innerClass={classes.CellText}\n            key={\"AI\" + index.toString() + i.toString()}\n            id={\"AI\" + index.toString() + i.toString()}\n          >\n            •\n          </GridCell>\n        );\n        // cell contains a ship\n      } else {\n        return (\n          <GridCell\n            outerClass={\n              props.isStarted && !props.gameIsOver\n                ? `${classes.Item} ${classes.Hover}`\n                : classes.Item\n            }\n            innerClass={classes.CellText}\n            key={\"AI\" + index.toString() + i.toString()}\n            id={\"AI\" + index.toString() + i.toString()}\n            onClick={(e) =>\n              props.playRound(e, \"AI\" + index.toString() + i.toString())\n            }\n          />\n        );\n      }\n    });\n  });\n\n  return <div className={classes.Container}>{newGrid}</div>;\n};\n\nexport default Grid;\n","import React from \"react\";\nimport * as classes from \"./Button.module.css\";\n\nconst Button = (props) => {\n  return (\n    <button className={classes.StartGame} onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nimport * as classes from \"./Header.module.css\";\n\nconst Header = (props) => {\n  return (\n    <div className={classes.HeaderCont}>\n      <span className={classes.Title}>Battleship</span>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport * as classes from \"./Announcer.module.css\";\n\nconst Announcer = (props) => {\n  let spanStyle;\n  let divStyle;\n  switch (props.text) {\n    case \"Victory\":\n      spanStyle = `${classes.Victory}`;\n      divStyle = `${classes.TextCont} ${classes.Appear}`;\n      break;\n    case \"Defeat\":\n      spanStyle = `${classes.Defeat}`;\n      divStyle = `${classes.TextCont} ${classes.Appear}`;\n      break;\n    default:\n      spanStyle = `${classes.Default}`;\n      divStyle = `${classes.TextCont}`;\n      break;\n  }\n  return (\n    <div className={divStyle}>\n      <span className={spanStyle}>\n        {props.text === \"Victory\" ? \"Victory\" : \"Defeat\"}\n      </span>\n    </div>\n  );\n};\n\nexport default Announcer;\n","import React from \"react\";\nimport * as classes from \"./TutorialItem.module.css\";\n\nconst TutorialItem = (props) => {\n  return <li className={classes.TutorialItem}>{props.children}</li>;\n};\n\nexport default TutorialItem;\n","import React from \"react\";\nimport TutorialItem from \"../TutorialItem/TutorialItem\";\nimport * as classes from \"./TutorialCont.module.css\";\n\nconst TutorialCont = (props) => {\n  return (\n    <div\n      className={classes.TutorialCont}\n      onClick={props.toggle}\n      style={props.show ? { opacity: 1 } : { opacity: 0 }}\n    >\n      <ul className={classes.List}>\n        <TutorialItem>\n          {props.isStarted\n            ? \"Click on the computer's board to play\"\n            : \"Drag and drop your battleships to place them\"}\n        </TutorialItem>\n        <TutorialItem>\n          {props.isStarted\n            ? \"Sink all computer's battleships to win\"\n            : \"Click on your battleships to change their axis\"}\n        </TutorialItem>\n        <TutorialItem>\n          {props.isStarted\n            ? \"Click here to hide this\"\n            : \"Press 'Start Game' to start playing\"}\n        </TutorialItem>\n      </ul>\n    </div>\n  );\n};\n\nexport default TutorialCont;\n","import React from \"react\";\nimport * as classes from \"./SunkShip.module.css\";\n\nconst SunkShip = (props) => {\n  let builtShip = [];\n  for (let x = 0; x < props.length; x++) {\n    builtShip.push(\n      <span\n        key={x}\n        className={\n          !props.isSunk\n            ? classes.shipPart\n            : `${classes.shipPart} ${classes.sunk}`\n        }\n      ></span>\n    );\n  }\n\n  return <div className={classes.shipCont}>{builtShip}</div>;\n};\n\nexport default SunkShip;\n","import React from \"react\";\nimport SunkShip from \"../SunkShip/SunkShip\";\nimport * as classes from \"./SunkCont.module.css\";\n\nconst SunkCont = (props) => {\n  return (\n    <div className={classes.SunkCont}>\n      <SunkShip length={5} isSunk={props.sunkList.includes(\"5\")} />\n      <SunkShip length={4} isSunk={props.sunkList.includes(\"4\")} />\n      <SunkShip length={3} isSunk={props.sunkList.includes(\"3_2\")} />\n      <SunkShip length={3} isSunk={props.sunkList.includes(\"3_1\")} />\n      <SunkShip length={2} isSunk={props.sunkList.includes(\"2\")} />\n    </div>\n  );\n};\n\nexport default SunkCont;\n","import React, { useState, useEffect } from \"react\";\n\nimport createGameboard from \"../../factories/gameboardFactory/gameboardFactory\";\nimport createShip from \"../../factories/shipFactory/shipFactory\";\nimport PlayerGrid from \"../../components/Grid/PlayerGrid/PlayerGrid\";\nimport AiGrid from \"../../components/Grid/AiGrid/AiGrid\";\nimport Button from \"../../components/Button/Button\";\nimport classes from \"./Game.module.css\";\nimport Header from \"../../components/Header/Header\";\nimport Announcer from \"../../components/Announcer/Announcer\";\nimport TutorialCont from \"../../components/Tutorial/TutorialCont/TutorialCont\";\nimport SunkCont from \"../../components/SunkShips/SunkCont/SunkCont\";\n\nconst Game = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [gameIsOver, setGameIsOver] = useState(false);\n  const [shouldPlace, setShouldPlace] = useState(false);\n  const [text, setText] = useState(\"TBD\");\n  const [show, setShow] = useState(true);\n  const [sunkList, setSunkList] = useState([]);\n\n  const initialShip = createShip();\n\n  const [Pship2, setPship2] = useState(initialShip.getInitialShip(\"2\"));\n  const [Pship3_1, setPship3_1] = useState(initialShip.getInitialShip(\"3_1\"));\n  const [Pship3_2, setPship3_2] = useState(initialShip.getInitialShip(\"3_2\"));\n  const [Pship4, setPship4] = useState(initialShip.getInitialShip(\"4\"));\n  const [Pship5, setPship5] = useState(initialShip.getInitialShip(\"5\"));\n\n  const [AIship2, setAIship2] = useState(initialShip.getInitialShip(\"2\"));\n  const [AIship3_1, setAIship3_1] = useState(initialShip.getInitialShip(\"3_1\"));\n  const [AIship3_2, setAIship3_2] = useState(initialShip.getInitialShip(\"3_2\"));\n  const [AIship4, setAIship4] = useState(initialShip.getInitialShip(\"4\"));\n  const [AIship5, setAIship5] = useState(initialShip.getInitialShip(\"5\"));\n\n  const initialBoard = createGameboard();\n\n  const [playerBoard, setPlayerBoard] = useState(initialBoard.getInitialBoard);\n  const [playerCoords, setPlayerCoords] = useState(\n    initialBoard.getInitialCoords\n  );\n  const [playerData, setPlayerData] = useState(initialBoard.getInitialData);\n\n  const [aiBoard, setAIboard] = useState(initialBoard.getInitialBoard);\n  const [aiCoords, setAIcoords] = useState(initialBoard.getInitialCoords);\n  const [aiData, setAIdata] = useState(initialBoard.getInitialData);\n\n  const [firstHit, setFirstHit] = useState(null);\n  const [foundShips, setFoundShips] = useState([]);\n  const [hitCoords, setHitCoords] = useState(null);\n  const [adjDir, setAdjDir] = useState(null);\n\n  const startGame = () => {\n    setIsStarted(true);\n  };\n\n  const toggle = () => {\n    setShow(!show);\n  };\n\n  const resetGame = () => {\n    setPship2(initialShip.getInitialShip(\"2\"));\n    setPship3_1(initialShip.getInitialShip(\"3_1\"));\n    setPship3_2(initialShip.getInitialShip(\"3_2\"));\n    setPship4(initialShip.getInitialShip(\"4\"));\n    setPship5(initialShip.getInitialShip(\"5\"));\n    setAIship2(initialShip.getInitialShip(\"2\"));\n    setAIship3_1(initialShip.getInitialShip(\"3_1\"));\n    setAIship3_2(initialShip.getInitialShip(\"3_2\"));\n    setAIship4(initialShip.getInitialShip(\"4\"));\n    setAIship5(initialShip.getInitialShip(\"5\"));\n    setPlayerBoard(initialBoard.getInitialBoard);\n    setPlayerCoords(initialBoard.getInitialCoords);\n    setPlayerData(initialBoard.getInitialData);\n    setAIboard(initialBoard.getInitialBoard);\n    setAIcoords(initialBoard.getInitialCoords);\n    setAIdata(initialBoard.getInitialData);\n    setFirstHit(null);\n    setFoundShips([]);\n    setHitCoords(null);\n    setAdjDir(null);\n    setIsStarted(false);\n    setGameIsOver(false);\n    setPlayerTurn(true);\n    setShouldPlace(!shouldPlace);\n    setText(\"TBD\");\n    setShow(true);\n    setSunkList([]);\n  };\n\n  const playerBoardPlaceShipsHandler = (ship1, ship2, ship3, ship4, ship5) => {\n    let newState = initialBoard.randomPlaceShip(\n      playerBoard,\n      playerCoords,\n      playerData,\n      \"2\"\n    );\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"3_1\"\n    );\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"3_2\"\n    );\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"4\"\n    );\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"5\"\n    );\n    setPlayerBoard(newState[0]);\n    setPlayerCoords(newState[1]);\n    setPlayerData(newState[2]);\n  };\n\n  const placeShips = (ship, x, y, orientation) => {\n    // handles placing ships by drag and dropping\n    let newPlacement = initialBoard.placeShip(\n      playerBoard,\n      playerCoords,\n      playerData,\n      ship,\n      x,\n      y,\n      orientation\n    );\n    if (newPlacement) {\n      setPlayerBoard(newPlacement[0]);\n      setPlayerCoords(newPlacement[1]);\n      setPlayerData(newPlacement[2]);\n      return true;\n    } else return false;\n  };\n\n  const aiBoardPlaceShipsHandler = (ship1, ship2, ship3, ship4, ship5) => {\n    // places AI's ships randomly\n    let newState = initialBoard.randomPlaceShip(aiBoard, aiCoords, aiData, \"2\");\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"3_1\"\n    );\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"3_2\"\n    );\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"4\"\n    );\n    newState = initialBoard.randomPlaceShip(\n      newState[0],\n      newState[1],\n      newState[2],\n      \"5\"\n    );\n    setAIboard(newState[0]);\n    setAIcoords(newState[1]);\n    setAIdata(newState[2]);\n  };\n\n  const getAdjCoords = (x, y) => {\n    // checks a cell's surrounding cells and collects valid ones (no hit/miss);\n    let adjCoords = [];\n    if (\n      x + 1 < 10 &&\n      playerBoard[x + 1][y] !== 2 &&\n      playerBoard[x + 1][y] !== 3\n    )\n      adjCoords.push([x + 1, y, \"down\"]);\n    if (\n      x - 1 >= 0 &&\n      playerBoard[x - 1][y] !== 2 &&\n      playerBoard[x - 1][y] !== 3\n    )\n      adjCoords.push([x - 1, y, \"up\"]);\n    if (\n      y + 1 < 10 &&\n      playerBoard[x][y + 1] !== 2 &&\n      playerBoard[x][y + 1] !== 3\n    )\n      adjCoords.push([x, y + 1, \"right\"]);\n    if (\n      y - 1 >= 0 &&\n      playerBoard[x][y - 1] !== 2 &&\n      playerBoard[x][y - 1] !== 3\n    )\n      adjCoords.push([x, y - 1, \"left\"]);\n    return adjCoords;\n  };\n\n  const checkIsSunk = (shipAt) => {\n    // checks if a ship is sunk upon being hit\n    let sunk;\n    let newShip;\n    switch (shipAt) {\n      case \"2\":\n        newShip = initialShip.hit(Pship2);\n        sunk = initialShip.isSunk(newShip);\n        setPship2(newShip);\n        return sunk;\n      case \"3_1\":\n        newShip = initialShip.hit(Pship3_1);\n        sunk = initialShip.isSunk(newShip);\n        setPship3_1(newShip);\n        return sunk;\n      case \"3_2\":\n        newShip = initialShip.hit(Pship3_2);\n        sunk = initialShip.isSunk(newShip);\n        setPship3_2(newShip);\n        return sunk;\n      case \"4\":\n        newShip = initialShip.hit(Pship4);\n        sunk = initialShip.isSunk(newShip);\n        setPship4(newShip);\n        return sunk;\n      case \"5\":\n        newShip = initialShip.hit(Pship5);\n        sunk = initialShip.isSunk(newShip);\n        setPship5(newShip);\n        return sunk;\n      default:\n        return false;\n    }\n  };\n\n  const changeOri = (ship) => {\n    // changes a ship's axis (e.g. from \"x\" to \"y\")\n    let newPlacement = initialBoard.changeOrientation(\n      playerBoard,\n      playerCoords,\n      ship\n    );\n    if (newPlacement) {\n      setPlayerBoard(newPlacement[0]);\n      setPlayerCoords(newPlacement[1]);\n      return true;\n    } else return false;\n  };\n\n  const switchDir = () => {\n    switch (adjDir) {\n      case \"down\":\n        setAdjDir(\"up\");\n        break;\n      case \"up\":\n        setAdjDir(\"down\");\n        break;\n      case \"right\":\n        setAdjDir(\"left\");\n        break;\n      case \"left\":\n        setAdjDir(\"right\");\n        break;\n      default:\n        return false;\n    }\n  };\n\n  const aiPlayRound = (board, boardData) => {\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let newData = JSON.parse(JSON.stringify(boardData));\n    // if no ship was previously hit\n    if (firstHit === null && foundShips.length === 0) {\n      let aiTurn = initialBoard.receiveRandomAttack(newBoard, newData);\n      // AI's turn hit a ship, check which ship it hit and if it sunk\n      if (playerBoard[aiTurn[0]][aiTurn[1]] === 1) {\n        let shipAt = initialBoard.shipAt(playerCoords, aiTurn[0], aiTurn[1]);\n        let sunk = checkIsSunk(shipAt);\n        if (!sunk) setFirstHit([aiTurn[0], aiTurn[1], shipAt]);\n      }\n      setPlayerBoard(aiTurn[2]);\n      setPlayerData(aiTurn[3]);\n      setPlayerTurn(true);\n      // checks if the game is over\n      if (initialBoard.isOverCheck(aiTurn[3])) {\n        setText(\"Defeat\");\n        setGameIsOver(true);\n        setPlayerTurn(false);\n      }\n    } else {\n      // if a ship was hit but AI doesn't know which way is the rest of the ship\n      if (adjDir === null) {\n        // get adjacent cells and try shooting them one by one until a ship is hit\n        let adjCoordsArgs = [firstHit[0], firstHit[1]];\n        let adjCells = getAdjCoords(adjCoordsArgs[0], adjCoordsArgs[1]);\n        let randomAdj = adjCells[Math.floor(Math.random() * adjCells.length)];\n        let randomTurn = initialBoard.receiveAttack(\n          newBoard,\n          newData,\n          randomAdj[0],\n          randomAdj[1]\n        );\n        setPlayerBoard(randomTurn[0]);\n        setPlayerData(randomTurn[1]);\n        setPlayerTurn(true);\n        // if a ship was hit, check if the game is over, what ship got hit and if it sunk\n        if (randomTurn[0][randomAdj[0]][randomAdj[1]] === 2) {\n          if (initialBoard.isOverCheck(randomTurn[1])) {\n            setText(\"Defeat\");\n            setGameIsOver(true);\n            setPlayerTurn(false);\n          }\n          let shipAt = initialBoard.shipAt(\n            playerCoords,\n            randomAdj[0],\n            randomAdj[1]\n          );\n          let sunk = checkIsSunk(shipAt);\n          // check if the hit ship is the same as the first hit ship, if it isnt, add it as the next target\n          if (shipAt === firstHit[2]) {\n            // if the ship wasn't sunk, save the direction and keep shooting until it's sunk or missed\n            if (!sunk) {\n              setAdjDir(randomAdj[2]);\n              setHitCoords([randomAdj[0], randomAdj[1]]);\n            } else {\n              if (foundShips.length > 0) {\n                setFirstHit([...foundShips[0]]);\n                setHitCoords(null);\n                setAdjDir(null);\n                setFoundShips(foundShips.slice(1));\n              } else {\n                setFirstHit(null);\n                setHitCoords(null);\n                setAdjDir(null);\n              }\n            }\n          } else {\n            // add the ship as the next target (if the hit isn't the same ship as the first one)\n            let newFoundShips = JSON.parse(JSON.stringify(foundShips));\n            newFoundShips.push([randomAdj[0], randomAdj[1], shipAt]);\n            setFoundShips(newFoundShips);\n          }\n        }\n      } else {\n        // we have a direction so shoot until you miss / sink a ship\n        let nextMove;\n        let safeMove;\n        let newHitCoord = [...hitCoords];\n        switch (adjDir) {\n          case \"down\":\n            nextMove = [newHitCoord[0] + 1, newHitCoord[1]];\n            safeMove = [firstHit[0] - 1, firstHit[1]];\n            break;\n          case \"up\":\n            nextMove = [newHitCoord[0] - 1, newHitCoord[1]];\n            safeMove = [firstHit[0] + 1, firstHit[1]];\n            break;\n          case \"right\":\n            nextMove = [newHitCoord[0], newHitCoord[1] + 1];\n            safeMove = [firstHit[0], firstHit[1] - 1];\n            break;\n          case \"left\":\n            nextMove = [newHitCoord[0], newHitCoord[1] - 1];\n            safeMove = [firstHit[0], firstHit[1] + 1];\n            break;\n          default:\n            return false;\n        }\n        if (\n          nextMove[0] === 10 ||\n          nextMove[0] === -1 ||\n          nextMove[1] === 10 ||\n          nextMove[1] === -1\n        ) {\n          // if the next move is off board, play a safe move and switch direction\n          nextMove = [...safeMove];\n          switchDir();\n        }\n        // again check if we hit, sunk etc. If sunk, search for a new target or shoot randomly\n        if (playerBoard[nextMove[0]][nextMove[1]] === 1) {\n          let shipAt = initialBoard.shipAt(\n            playerCoords,\n            nextMove[0],\n            nextMove[1]\n          );\n          let sunk = checkIsSunk(shipAt);\n          let aiTurn = initialBoard.receiveAttack(\n            newBoard,\n            newData,\n            nextMove[0],\n            nextMove[1]\n          );\n          setPlayerBoard(aiTurn[0]);\n          setPlayerData(aiTurn[1]);\n          setPlayerTurn(true);\n          if (initialBoard.isOverCheck(aiTurn[1])) {\n            setText(\"Defeat\");\n            setGameIsOver(true);\n            setPlayerTurn(false);\n          }\n          if (!sunk) {\n            setHitCoords([nextMove[0], nextMove[1]]);\n          } else {\n            if (foundShips.length > 0) {\n              setFirstHit([...foundShips[0]]);\n              setHitCoords(null);\n              setAdjDir(null);\n              setFoundShips(foundShips.slice(1));\n            } else {\n              setFirstHit(null);\n              setHitCoords(null);\n              setAdjDir(null);\n            }\n          }\n        } else {\n          let newHitCoords = [...firstHit];\n          setHitCoords(newHitCoords);\n          switchDir();\n          if (\n            playerBoard[nextMove[0]][nextMove[1]] === 2 ||\n            playerBoard[nextMove[0]][nextMove[1]] === 3\n          ) {\n            nextMove = [...safeMove];\n            if (playerBoard[nextMove[0]][nextMove[1]] === 1) {\n              let safeShipAt = initialBoard.shipAt(\n                playerCoords,\n                nextMove[0],\n                nextMove[1]\n              );\n              let safeIsSunk = checkIsSunk(safeShipAt);\n              if (safeIsSunk) {\n                setHitCoords(null);\n                setFirstHit(null);\n                setAdjDir(null);\n              }\n            }\n          }\n          const [newPboard, newPdata] = initialBoard.receiveAttack(\n            newBoard,\n            newData,\n            nextMove[0],\n            nextMove[1]\n          );\n          setPlayerBoard(newPboard);\n          setPlayerData(newPdata);\n          setPlayerTurn(true);\n          if (initialBoard.isOverCheck(newPdata)) {\n            setText(\"Defeat\");\n            setGameIsOver(true);\n            setPlayerTurn(false);\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!playerTurn && !gameIsOver) {\n      setTimeout(() => aiPlayRound(playerBoard, playerData), 1100);\n    }\n    // eslint-disable-next-line\n  }, [playerTurn]);\n\n  const playRound = (event, id) => {\n    if (!isStarted || !playerTurn) {\n      return false;\n    } else {\n      const x = id.charAt(2);\n      const y = id.charAt(3);\n      setPlayerTurn(false);\n      if (aiBoard[x][y] === 0) {\n        const [newAiBoard, newAiData] = initialBoard.receiveAttack(\n          aiBoard,\n          aiData,\n          x,\n          y\n        );\n        setAIboard(newAiBoard);\n        setAIdata(newAiData);\n      } else if (aiBoard[x][y] === 1) {\n        const [newAiBoard, newAiData] = initialBoard.receiveAttack(\n          aiBoard,\n          aiData,\n          x,\n          y\n        );\n        setAIboard(newAiBoard);\n        setAIdata(newAiData);\n        let shipAt = initialBoard.shipAt(aiCoords, x, y);\n        let newShip;\n        let sunk;\n        switch (shipAt) {\n          case \"2\":\n            newShip = initialShip.hit(AIship2);\n            sunk = initialShip.isSunk(newShip);\n            if (sunk) {\n              let newSunkList = [...sunkList];\n              newSunkList.push(\"2\");\n              setSunkList(newSunkList);\n            }\n            setAIship2(newShip);\n            break;\n          case \"3_1\":\n            newShip = initialShip.hit(AIship3_1);\n            sunk = initialShip.isSunk(newShip);\n            if (sunk) {\n              let newSunkList = [...sunkList];\n              newSunkList.push(\"3_1\");\n              setSunkList(newSunkList);\n            }\n            setAIship3_1(newShip);\n            break;\n          case \"3_2\":\n            newShip = initialShip.hit(AIship3_2);\n            sunk = initialShip.isSunk(newShip);\n            if (sunk) {\n              let newSunkList = [...sunkList];\n              newSunkList.push(\"3_2\");\n              setSunkList(newSunkList);\n            }\n            setAIship3_2(newShip);\n            break;\n          case \"4\":\n            newShip = initialShip.hit(AIship4);\n            sunk = initialShip.isSunk(newShip);\n            if (sunk) {\n              let newSunkList = [...sunkList];\n              newSunkList.push(\"4\");\n              setSunkList(newSunkList);\n            }\n            setAIship4(newShip);\n            break;\n          case \"5\":\n            newShip = initialShip.hit(AIship5);\n            sunk = initialShip.isSunk(newShip);\n            if (sunk) {\n              let newSunkList = [...sunkList];\n              newSunkList.push(\"5\");\n              setSunkList(newSunkList);\n            }\n            setAIship5(newShip);\n            break;\n          default:\n            return false;\n        }\n        if (initialBoard.isOverCheck(newAiData)) {\n          setText(\"Victory\");\n          setGameIsOver(true);\n          setPlayerTurn(false);\n        }\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Header />\n      <Announcer gameIsOver={gameIsOver} text={text} />\n      <TutorialCont isStarted={isStarted} toggle={toggle} show={show} />\n      <SunkCont sunkList={sunkList} />\n      <div className={classes.GridCont}>\n        <div className={classes.PlayerGrid}>\n          <PlayerGrid\n            testid=\"playerGrid\"\n            shouldPlace={shouldPlace}\n            isStarted={isStarted}\n            board={playerBoard}\n            coords={playerCoords}\n            randomPlaceShips={playerBoardPlaceShipsHandler}\n            placeShips={placeShips}\n            ship2={Pship2}\n            ship3_1={Pship3_1}\n            ship3_2={Pship3_2}\n            ship4={Pship4}\n            ship5={Pship5}\n            isOver={gameIsOver}\n            changeOri={changeOri}\n          />\n        </div>\n        <AiGrid\n          testid=\"aiGrid\"\n          shouldPlace={shouldPlace}\n          playRound={playRound}\n          randomPlaceShips={aiBoardPlaceShipsHandler}\n          isStarted={isStarted}\n          isOver={gameIsOver}\n          board={aiBoard}\n          coords={aiCoords}\n          ship2={AIship2}\n          ship3_1={AIship3_1}\n          ship3_2={AIship3_2}\n          ship4={AIship4}\n          ship5={AIship5}\n        />\n      </div>\n      <Button onClick={isStarted ? resetGame : startGame}>\n        {isStarted ? \"Restart Game\" : \"Start Game\"}\n      </Button>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./containers/Game/Game\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DndProvider backend={HTML5Backend}>\n        <Game />\n      </DndProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}